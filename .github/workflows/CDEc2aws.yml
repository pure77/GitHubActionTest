# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  workflow_run:
    workflows: ["CIgradle.yml"]
    types:
      - completed


jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest # 실행될 인스턴스 OS와 버전

    steps:
      - name: excuting remote ssh commands
        uses: appleboy/ssh-action@v0.1.9 # ssh 접속하는 오픈소스
        with:
          host: ${{ secrets.HOST}} # ec2 인스턴스 ip
          username: ${{ secrets.REMOTE_USER }} # ubuntu 아이디
          key: ${{ secrets.SSH_PRIVATE_KEY }} # ec2 인스턴스 pem key
          port: ${{ secrets.REMOTE_SSH_PORT }} # 접속포트번호 (보통 22)
          script: | # 실행될 스크립트
            cd GitHubActionTest
            git pull
